<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>KEDYY</title>
 <link href="http://http://blog.kedyy.com/atom.xml" rel="self"/>
 <link href="http://http://blog.kedyy.com"/>
 <updated>2016-08-18T11:59:56+00:00</updated>
 <author>
   <name>Yifei0727</name>
   <email>Yifei0727+github@gmail.com</email>
 </author>

 
 <entry>
   <title>利用github-pages建立个人博客</title>
   <link href="http://http://blog.kedyy.com/other/programming/2015/03/01/github-pages-blog.html"/>
   <updated>2015-03-01T00:00:00+00:00</updated>
   <id>/other/programming/2015/03/01/github-pages-blog</id>
   <content type="html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;购买、绑定独立域名&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github&quot; id=&quot;markdown-toc-github&quot;&gt;配置和使用Github&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-keys&quot; id=&quot;markdown-toc-ssh-keys&quot;&gt;检查SSH keys的设置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-key&quot; id=&quot;markdown-toc-ssh-key&quot;&gt;备份和移除原来的ssh key设置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-key-1&quot; id=&quot;markdown-toc-ssh-key-1&quot;&gt;生成新的SSH Key&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ssh-keygithub&quot; id=&quot;markdown-toc-ssh-keygithub&quot;&gt;添加SSH Key到GitHub&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;测试一下&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;设置你的账号信息&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;快速开始&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;帐号注册&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;创建项目仓库&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;本地编辑及上传&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;域名扫盲&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#aaddress&quot; id=&quot;markdown-toc-aaddress&quot;&gt;A（Address）记录&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cname&quot; id=&quot;markdown-toc-cname&quot;&gt;CNAME&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ttl&quot; id=&quot;markdown-toc-ttl&quot;&gt;TTL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;域名分级&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;域名购买&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#github-page&quot; id=&quot;markdown-toc-github-page&quot;&gt;绑定域名到GitHub-Page&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll&quot; id=&quot;markdown-toc-jekyll&quot;&gt;jekyll的安装&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;更新&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ruby&quot; id=&quot;markdown-toc-ruby&quot;&gt;Ruby安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubydevkit&quot; id=&quot;markdown-toc-rubydevkit&quot;&gt;RubyDevKit安装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rubygems&quot; id=&quot;markdown-toc-rubygems&quot;&gt;Rubygems&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jekyll-1&quot; id=&quot;markdown-toc-jekyll-1&quot;&gt;安装jekyll&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll-2&quot; id=&quot;markdown-toc-jekyll-2&quot;&gt;jekyll介绍&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jekyll-3&quot; id=&quot;markdown-toc-jekyll-3&quot;&gt;jekyll是如何工作的&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;一个例子&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;第一篇文章&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#liquid&quot; id=&quot;markdown-toc-liquid&quot;&gt;liquid&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;样式、分类、标签&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;代码高亮&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#python-pygments&quot; id=&quot;markdown-toc-python-pygments&quot;&gt;安装Python Pygments&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;设置代码高亮的样式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#css&quot; id=&quot;markdown-toc-css&quot;&gt;生成指定样式的css文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;给文章添加目录&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;评论功能&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;站内搜索&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;站点统计&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#godaddy--dnspod&quot; id=&quot;markdown-toc-godaddy--dnspod&quot;&gt;GoDaddy &amp;amp; DNSPod&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github--jekyll&quot; id=&quot;markdown-toc-github--jekyll&quot;&gt;GitHub &amp;amp; Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#markdown&quot; id=&quot;markdown-toc-markdown&quot;&gt;Markdown语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;Github很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如jQuery、Twitter等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了Github Pages的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。&lt;/p&gt;

&lt;p&gt;Github Pages有以下几个优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;轻量级的博客系统，没有麻烦的配置&lt;/li&gt;
  &lt;li&gt;使用标记语言，比如Markdown 无需自己搭建服务器&lt;/li&gt;
  &lt;li&gt;根据Github的限制，对应的每个站有300MB空间&lt;/li&gt;
  &lt;li&gt;可以绑定自己的域名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然他也有缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用Jekyll模板系统，相当于静态页发布，适合博客，文档介绍等。&lt;/li&gt;
  &lt;li&gt;动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。&lt;/li&gt;
  &lt;li&gt;基于Git，很多东西需要动手，不像Wordpress有强大的后台&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;购买、绑定独立域名&lt;/h2&gt;

&lt;p&gt;虽说Godaddy曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。&lt;/p&gt;

&lt;p&gt;域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。&lt;/p&gt;

&lt;p&gt;流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在BeiYuu也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。&lt;/p&gt;

&lt;p&gt;我们选择DNSPod的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：&lt;/p&gt;

&lt;p&gt;首先添加域名记录，可参考DNSPod的帮助文档：&lt;a href=&quot;https://www.dnspod.cn/Support&quot;&gt;https://www.dnspod.cn/Support&lt;/a&gt;
在DNSPod自己的域名下添加一条A记录，地址就是Github Pages的服务IP地址：&lt;code class=&quot;highlighter-rouge&quot;&gt;192.30.252.153&lt;/code&gt;
在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址： &lt;code class=&quot;highlighter-rouge&quot;&gt;f1g1ns1.dnspod.net、f1g1ns2.dnspod.net&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;github&quot;&gt;配置和使用Github&lt;/h2&gt;

&lt;p&gt;git是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本&lt;a href=&quot;http://git-scm.com/book/zh&quot;&gt;Git中文教程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。下载地址在这里：&lt;a href=&quot;http://code.google.com/p/msysgit/downloads/list&quot;&gt;http://code.google.com/p/msysgit/downloads/lis
&lt;/a&gt;。其他系统的安装也可以参考官方的安装教程。&lt;/p&gt;

&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;email@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ssh-keys&quot;&gt;检查SSH keys的设置&lt;/h3&gt;

&lt;p&gt;首先我们需要检查你电脑上现有的ssh key：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~/.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ssh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果显示“No such file or directory”，跳到第三步，否则继续。&lt;/p&gt;

&lt;h3 id=&quot;ssh-key&quot;&gt;备份和移除原来的ssh key设置&lt;/h3&gt;

&lt;p&gt;因为已经存在key文件，所以需要备份旧的数据并删除：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls
config  id_rsa  id_rsa.pub  known_hosts
mkdir key_backup
cp id_rsa&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; key_backup
rm id_rsa&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ssh-key-1&quot;&gt;生成新的SSH Key&lt;/h3&gt;

&lt;p&gt;输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-keygen -t rsa -C &lt;span class=&quot;s2&quot;&gt;&quot;邮件地址@youremail.com&quot;&lt;/span&gt;
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/	your_user_directory/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&amp;lt;回车就好&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后系统会要你输入加密串（Passphrase）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&amp;lt;输入加密串&amp;gt;
Enter same passphrase again:&amp;lt;再次输入加密串&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后看到ssh key success，就成功设置ssh key了.&lt;/p&gt;

&lt;h3 id=&quot;ssh-keygithub&quot;&gt;添加SSH Key到GitHub&lt;/h3&gt;

&lt;p&gt;在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。&lt;/p&gt;

&lt;p&gt;用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。&lt;/p&gt;

&lt;p&gt;在GitHub的主页上点击设置按钮： github account setting&lt;/p&gt;

&lt;p&gt;选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可： 
&lt;img src=&quot;/images/images/githubpages/bootcamp_1_ssh.jpg&quot; alt=&quot;set ssh keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PS：如果需要配置多个GitHub账号，可以参看这个&lt;a href=&quot;http://ju.outofmemory.cn/entry/16775&quot;&gt;多个github帐号的SSH key切换&lt;/a&gt;，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global --unset user.email&lt;/code&gt;删除用户账户设置，在每一个repo下面使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --local user.email '你的github邮箱@mail.com' &lt;/code&gt;命令单独设置用户账户信息&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;测试一下&lt;/h3&gt;

&lt;p&gt;可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -T git@github.com

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果是下面的反应：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不要紧张，输入yes就好，然后会看到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hi &amp;lt;em&amp;gt;username&amp;lt;/em&amp;gt;! You've successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;设置你的账号信息&lt;/h3&gt;

&lt;p&gt;现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。&lt;/p&gt;

&lt;p&gt;Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git config --global user.name &lt;span class=&quot;s2&quot;&gt;&quot;你的名字&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git config --global user.email &lt;span class=&quot;s2&quot;&gt;&quot;your_email@youremail.com&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;好了，你已经可以成功连接GitHub了。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;快速开始&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;帐号注册&lt;/h3&gt;

&lt;p&gt;在创建博客之前，当然必须有GitHub的帐号，该帐号将用来创建项目，默认的域名&lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.com/projectName&lt;/code&gt;中的username也要用到这个帐号。&lt;/p&gt;

&lt;p&gt;注意：下面涉及到的一些命令凡是更用户名和项目名有关的一律会用这里的username和projectName代替，注意替换
访问：&lt;a href=&quot;http://www.github.com/&quot;&gt;http://www.github.com/ &lt;/a&gt;sign up for free的意思就是“免费注册登录”，注册你的username和邮箱，邮箱十分重要，GitHub上很多通知都是通过邮箱的。比如你的主页上传并构建成功会通过邮箱通知，更重要的是，如果构建失败的话也会在邮件中说明原因。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;创建项目仓库&lt;/h3&gt;

&lt;p&gt;在创建博客之前，还需要用已有的帐号创建一个项目，上面那个链接的projectName将是这里即将创建的项目名称。在Git中，项目被称为仓库(Repository)，仓库顾名思义，当然可以包含代码或者非代码。将来我们的网页或者模板实际上都是保存在这个仓库中的。&lt;/p&gt;

&lt;p&gt;登录后，访问&lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt;，创建仓库如下图：
&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-02-img0.png&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建了仓库后，我们就需要管理它，无论是管理本地仓库还是远程仓库都需要Git客户端。Git客户端实际上十分强大，它本身就可以offline的创建本地仓库，而本地仓库和远程仓库之间的同步也是通过Git客户端完成的。&lt;/p&gt;

&lt;p&gt;这里省略了windows下安装和使用Git客户端的基本技巧，您应该已经掌握此技能了。虽然，您仍然可以按照本教程的指引完成一个简单的网站，但是后期的维护工作无论如何都不能少了这项技能。&lt;/p&gt;

&lt;p&gt;下面的步骤假设您已经安装好了Git客户端，安装和使用技巧请参见：Git学习资源&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;本地编辑及上传&lt;/h3&gt;

&lt;p&gt;在磁盘上创建一个目录，该目录与上面的项目名同名，在该目录下启用Git Bash命令行，并输入如下命令&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$git&lt;/span&gt; init

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;该命令实际上是在该目录下初始化一个本地的仓库，会在目录下新建一个.git的隐藏文件夹，可以看成是一个仓库数据库。&lt;/p&gt;

&lt;p&gt;创建一个没有父节点的分支gh-pages，并自动切换到这个分支上。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$git&lt;/span&gt; checkout --orphan gh-pages

    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在Git中，分支(branch)的概念非常重要，Git之所以强大，很大程度上就是因为它强大的分支体系。这里的分支名字必须是gh-pages，因为github规定，只有该分支中的页面，才会生成网页文件。&lt;/p&gt;

&lt;p&gt;在该目录下手动创建如下文件和文件夹，最终形成这样的结构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-02-img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_includes：默认的在模板中可以引用的文件的位置，后面会提到&lt;/li&gt;
  &lt;li&gt;_layouts：默认的公共页面的位置，后面会提到&lt;/li&gt;
  &lt;li&gt;_posts：博客文章默认的存放位置&lt;/li&gt;
  &lt;li&gt;.gitignore：git将忽略这个文件中列出的匹配的文件或文件夹，不将这些纳入源码管理&lt;/li&gt;
  &lt;li&gt;_config.yml：关于jekyll模板引擎的配置文件&lt;/li&gt;
  &lt;li&gt;index.html：默认的主页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在_layouts目录下创建一个default.html，在其中输入如下内容，注意：文件本身要以UTF-8 without BOM的格式保存，以防止各种编码问题，建议使用notepad++或者VIM编辑&lt;/p&gt;

&lt;p&gt;default.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
　&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content-type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
　&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;一步步在GitHub上创建博客主页(2)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
　
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编辑index.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
title: test title
---
&amp;lt;p&amp;gt;Hello world!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再次打开Git Bash，先后输入如下命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;first post&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git remote add origin https://github.com/username/projectName.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push origin gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;据网友反应，如果是初次安装git的话，在commit的时候会提示需要配置username和email，请读者注意根据提示配置一下，至于username和email可以随便填&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将当前的改动暂存在本地仓库&lt;/li&gt;
  &lt;li&gt;将暂存的改动提交到本地仓库，并写入本次提交的注释是”first post“&lt;/li&gt;
  &lt;li&gt;将远程仓库在本地添加一个引用：origin&lt;/li&gt;
  &lt;li&gt;向origin推送gh-pages分支，该命令将会将本地分支gh-pages推送到github的远程仓库，并在远程仓库创建一个同名的分支。该命令后会提示输入用户名和密码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在，你只需要稍等半分钟时间，访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://username.github.com/projectName&lt;/code&gt;就可以看到生成的博客了&lt;/p&gt;

&lt;p&gt;另外上面提到的，如果生成失败，Github会向你的邮箱发送一封邮件说明，请注意查收。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;域名扫盲&lt;/h2&gt;

&lt;p&gt;说实话，虽然明白什么是域名以及域名解析的原理，但是在实际的互联网环境中，域名的问题其实比理论上说的要复杂些。这里对一些概念稍作整理。&lt;/p&gt;

&lt;h3 id=&quot;aaddress&quot;&gt;A（Address）记录&lt;/h3&gt;

&lt;p&gt;是用来指定主机名（或域名）对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。&lt;/p&gt;

&lt;h3 id=&quot;cname&quot;&gt;CNAME&lt;/h3&gt;

&lt;p&gt;也被称为规范名字。这种记录允许您将多个名字映射到同一台计算机。 通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为&lt;code class=&quot;highlighter-rouge&quot;&gt;“host.mydomain.com”&lt;/code&gt;（A记录）。 它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。 这两个别名的全称就是&lt;code class=&quot;highlighter-rouge&quot;&gt;“www.mydomain.com”&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;“mail.mydomain.com”&lt;/code&gt;。实际上他们都指向&lt;code class=&quot;highlighter-rouge&quot;&gt;“host.mydomain.com”&lt;/code&gt;。 同样的方法可以用于当您拥有多个域名需要指向同一服务器IP，此时您就可以将一个域名做A记录指向服务器IP然后将其他的域名做别名到之前做A记录的域名上，那么当您的服务器IP地址变更时您就可以不必麻烦的一个一个域名更改指向了 只需要更改做A记录的那个域名其他做别名的那些域名的指向也将自动更改到新的IP地址上了。&lt;/p&gt;

&lt;h3 id=&quot;ttl&quot;&gt;TTL&lt;/h3&gt;

&lt;p&gt;TTL值全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。要理解TTL值，请先看下面的一个例子：
假设，有这样一个域名&lt;code class=&quot;highlighter-rouge&quot;&gt;myhost.cnMonkey.com&lt;/code&gt;（其实，这就是一条DNS记录，通常表示在abc.com域中有一台名为myhost的主机）对应IP地 址为1.1.1.1，它的TTL为10分钟。这个域名或称这条记录存储在一台名为dns.cnMonkey.com的DNS服务器上。
现在有一个用户键入一下地址（又称URL）：&lt;code class=&quot;highlighter-rouge&quot;&gt;http://myhost.cnMonkey.com&lt;/code&gt; 这时会发生什么呢？
该 访问者指定的DNS服务器（或是他的ISP,互联网服务商, 动态分配给他的)8.8.8.8就会试图为他解释myhost.cnMonkey.com，当然8.8.8.8这台DNS服务器由于没有包含 myhost.cnMonkey.com这条信息，因此无法立即解析，但是通过全球DNS的递归查询后，最终定位到dns.cnMonkey.com这台DNS服务器， dns.cnMonkey.com这台DNS服务器将myhost.cnMonkey.com对应的IP地址1.1.1.1告诉8.8.8.8这台DNS服务器，然有再由 8.8.8.8告诉用户结果。8.8.8.8为了以后加快对myhost.cnMonkey.com这条记录的解析，就将刚才的1.1.1.1结果保留一段时间，这 就是TTL时间，在这段时间内如果用户又有对myhost.cnMonkey.com这条记录的解析请求，它就直接告诉用户1.1.1.1，当TTL到期则又会重复 上面的过程。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;域名分级&lt;/h3&gt;

&lt;p&gt;子域名是个相对的概念，是相对父域名来说的。域名有很多级，中间用点分开。例如中国国家顶级域名CN，所有以 CN 结尾的域名便都是它的子域。例如：www.zzy.cn 便是 zzy.cn 的子域，而 zzy.cn 是 cn 的子域。&lt;/p&gt;

&lt;p&gt;“二级域名”：目前有很多用户认为“二级域名”是自己所注册域名的下一级域名，实际上这里所谓的“二级域名”并非真正的“二级”，而应该称为“次级”(相对次级)&lt;/p&gt;

&lt;p&gt;例如您注册的域名是abc.cn来说：CN为顶级域，abc.cn为二级域，www.abc.cn、mail.abc.cn、help.zzy.cn为三级域。&lt;/p&gt;

&lt;p&gt;还有一些特殊的二级域被用来作顶级域使用，例如：com.cn、net.cn、org.cn、gov.cn（包括地区域名bj.cn、fj.cn等）。那么此时用户所注册的就应该是三级域了，例如114.com.cn。（备注：www.gov.cn实际上是以gov.cn为后缀的www域名，就是说如果您在域名Whois信息查询中输入gov.cn是查询不到注册信息的因为gov.cn是作为顶级域来使用的域名后缀，真正开放注册的是www.gov.cn）。然而当前有很多用户还是习惯地将可以允许用户注册的域名称为顶级域名，而所注册域名的下一级域名称为“二级域名”，其实从严格意义上来讲这是不对的，所以我们前面会说“子域名”、“二级域名”是相对的概念，准确的应该称为“次级域名”。&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;域名购买&lt;/h3&gt;

&lt;p&gt;众所周知，域名是要购买的，国内用域名访问主机大概是要备案的，有些麻烦。所以现在很多人从国外的域名注册商那儿买域名，比如goddady。如果是新手想在国外买域名的话，最好准备一张VISA信用卡，并用paypal来支付（可以省手续费）。goddady现在也支持支付宝，支付起来也很方便。&lt;/p&gt;

&lt;h3 id=&quot;github-page&quot;&gt;绑定域名到GitHub-Page&lt;/h3&gt;

&lt;p&gt;其实十分简单，假设我们购买了域名&lt;a href=&quot;coolshell.info&quot;&gt;coolshell.info&lt;/a&gt;，想用coolshell.info访问你的站点&lt;code class=&quot;highlighter-rouge&quot;&gt;http://username.github.com/projectname&lt;/code&gt;，你可以参考这个链接：&lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;Setting up a custom domain with Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在你的域名提供商那边，设置一条A记录：&lt;/p&gt;

&lt;p&gt;colshell.info  204.232.175.78（注意：这个IP难保不会变，所以要及时关注上面这个链接中给出的IP，并及时更新A记录）。下面这个截图是goddady上的A记录配置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-03-img0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在你的gh-pages分支的根目录中创建一个CNAME文件，其中只能有一行，就是coolshell.info，用Git客户端上传更改，大约等十几分钟就能生效了。&lt;/p&gt;

&lt;p&gt;可以先ping一下coolshell.info，如果返回的IP地址更配置的A记录一样的话，说明域名已经注册好了，就等GitHub生效了。不过别急，你还需要把_config.yml中的baseurl设置如下&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	baseurl : /
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;或者是&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	baseurl :
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这取决于你的模板如何引用baseurl，总之指向根目录就好了。&lt;/p&gt;

&lt;p&gt;刚开始的时候我比较困惑的是，为什么A记录都指向的是同一个IP，GitHub是如何知道应该返回哪个用户的页面的。其实很简单，秘密就是上面提到的CNAME文件，GitHub应该会缓存所有gh-pages分支中的CNAME文件，用户对域名的请求被定向到GitHub住服务器的IP地址后，再根据用户请求的域名，判断对应哪个gh-pages，而且它会自动带上项目名，所以baseurl需要改为根目录。&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;jekyll的安装&lt;/h2&gt;

&lt;p&gt;前几篇介绍了GitHub-Page的基本原理和使用方法，还介绍了如何将购买的域名绑定博客主页。然而，当需要正儿八经的将一个博客构建起来，不仅要知道如何上传我们的文件，还要能够高效的更好的设计博客。因此，必须能够在上传之前在本地完成测试；另一方面，完全靠html来编辑博客，显然工作量太大，随着博客越来越复杂，简直不可能维护，因此，需要用jekyll这个模板引擎来帮忙。本篇先介绍如何搭建一个本地的测试环境。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;更新&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;根据网友的反应，需要注意的是Ruby的版本和RubyDevKit的版本要对应，不要装错；&lt;/li&gt;
  &lt;li&gt;另外，目前新版的Ruby自带gem了，所以gem安装可以跳过；&lt;/li&gt;
  &lt;li&gt;由于国内的网络（你们懂的），gem官方的源基本上是没法用了，参考文中的链接，使用淘宝的镜像比较靠谱；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jekyll有一个问题，可能需要修改下面这个文件，否则会出现GBK错误
&lt;code class=&quot;highlighter-rouge&quot;&gt;D:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-1.2.1\lib\jekyll\convertible.rb&lt;/code&gt;
将它改成
&lt;code class=&quot;highlighter-rouge&quot;&gt;self.content = File.read(File.join(base, name),:encoding =&amp;gt; &quot;utf-8&quot;)&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;D:\Ruby193\lib\ruby\gems\1.9.1\gems\jekyll-1.2.1\lib\jekyll\tags\include.rb&lt;/code&gt;中的最后几行的地方改成
&lt;code class=&quot;highlighter-rouge&quot;&gt;File.read_with_options(file,:encoding =&amp;gt; &quot;utf-8&quot;)&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;最新的jekyll修改了命令行参数，需使用如下命令行 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve --safe --watch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;jekyll 1.4.3在windows下本地生成的时候可能会出现&lt;code class=&quot;highlighter-rouge&quot;&gt;'fileutils.rb:247:in mkdir Invalid argument'&lt;/code&gt;的错误&lt;/li&gt;
  &lt;li&gt;jekyll 1.4.3在–watch参数的情况下可能会出现&lt;code class=&quot;highlighter-rouge&quot;&gt;'cannot load such file -- wdm (LoadError)'&lt;/code&gt;的错误，用gem安装wdm就好了： 	gem install wdm&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Ruby安装&lt;/h3&gt;

&lt;p&gt;jekyll本身基于Ruby开发，因此，想要在本地构建一个测试环境需要具有Ruby的开发和运行环境。在windows下，可以使用Rubyinstaller安装&lt;/p&gt;

&lt;p&gt;ruby安装说明：&lt;a href=&quot;http://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;http://www.ruby-lang.org/zh_cn/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ruby安装下载(windows)：&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;http://rubyinstaller.org/downloads/&lt;/a&gt;
windows的安装还是一如既往的“无脑”，不多说了。&lt;/p&gt;

&lt;p&gt;如果想要快速体验ruby开发，可以参考：&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/documentation/quickstart/&quot;&gt;20分钟体验 Ruby&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;rubydevkit&quot;&gt;RubyDevKit安装&lt;/h3&gt;

&lt;p&gt;从这个页面下载DevKit：&lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;http://rubyinstaller.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载下来的是一个很有意思的sfx文件，如果你安装有7-zip吧，可以直接双击，它会自解压到你所选择的目录。&lt;/p&gt;

&lt;p&gt;解压完成之后，用cmd进入到刚才解压的目录下，运行下面命令，该命令会生成config.yml。（这种安装方式让我想起了，linux下安装三步走&lt;code class=&quot;highlighter-rouge&quot;&gt;config-&amp;gt;make-&amp;gt;make install中的config&lt;/code&gt;）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; dk.rb init
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;config.yml文件实际上是检测系统安装的ruby的位置并记录在这个文件中，以便稍后使用。但上面的命令只针对使用rubyinstall安装的ruby有效，如果是其他方式安装的话，需要手动修改config.yml。我生成的config.yml文件内容如下：（注意路径用的是linux的斜杠方向）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#  This configuration file contains the absolute path locations of all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  installed Rubies to be enhanced to work with the DevKit. This config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  file is generated by the 'ruby dk.rb init' step and may be modified&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  before running the 'ruby dk.rb install' step. To include any installed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  Rubies that were not automagically discovered, simply add a line below&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  the triple hyphens with the absolute path to the Ruby root directory.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  Example:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  ---&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  - C:/ruby19trunk&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  - C:/ruby192dev&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &lt;/span&gt;
---
- C:/Ruby193&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后，执行如下命令，执行安装：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; setup.rb
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果没有setup.rb的话，执行：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; dk.rb install
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;rubygems&quot;&gt;Rubygems&lt;/h3&gt;

&lt;p&gt;Rubygems是类似Radhat的RPM、centOS的Yum、Ubuntu的apt-get的应用程序打包部署解决方案。Rubygems本身基于Ruby开发，在Ruby命令行中执行。我们需要它主要是因为jekyll的执行需要依赖很多Ruby应用程序，如果一个个手动安装比较繁琐。jekyll作为一个Ruby的应用，也实现了Rubygems打包标准。只要通过简单的命令就可以自动下载其依赖。&lt;/p&gt;

&lt;p&gt;gems下载地址：&lt;a href=&quot;http://rubyforge.org/frs/?group_id=126&quot;&gt;http://rubyforge.org/frs/?group_id=126&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压后，用cmd进入到解压后的目录，执行命令即可：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ruby&lt;/span&gt; setup.rb
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;就像yum仓库一样，仓库本身有很多，如果希望加快应用程序的下载速度，特别绕过“天朝”的网络管理制度，可以选择国内的仓库镜像，taobao有一个：&lt;a href=&quot;http://ruby.taobao.org/&quot;&gt;http://ruby.taobao.org/&lt;/a&gt;。配置方法这个链接里面很完全。&lt;/p&gt;

&lt;h3 id=&quot;jekyll-1&quot;&gt;安装jekyll&lt;/h3&gt;

&lt;p&gt;有了上面的基础，安装jekyll就十分轻松了，在此之前，建议国内用户换成淘宝服务器，速度更快：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem sources --remove http://rubygems.org/
    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem sources -a http://ruby.taobao.org/
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;执行下面gem命令即可全自动搞定：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;	&lt;span class=&quot;nv&quot;&gt;$gem&lt;/span&gt; install jekyll
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;jekyll依赖的组件如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;directory_watcher&lt;/li&gt;
  &lt;li&gt;liquid&lt;/li&gt;
  &lt;li&gt;open4&lt;/li&gt;
  &lt;li&gt;maruku&lt;/li&gt;
  &lt;li&gt;classifier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;测试jekyll服务&lt;/p&gt;

&lt;p&gt;安装好之后就可以测试我们的环境了。用cmd进入到上一节我们创建的目录，执行下面命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$jekyll&lt;/span&gt; --server --safe
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;jekyll此时会在localhost的4000端口监听http请求，用浏览器访问&lt;a href=&quot;http://localhost:4000/index.html&quot;&gt;http://localhost:4000/index.html&lt;/a&gt;，之前的页面出现了！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;
jekyll最新的动态和文档现在可以在&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyllrb&lt;/a&gt;上找到&lt;/p&gt;

&lt;h2 id=&quot;jekyll-2&quot;&gt;jekyll介绍&lt;/h2&gt;

&lt;p&gt;在前几篇中，多多少少对jekyll有所涉及，在这篇中将带读者进一步了解jekyll以及模板引擎liquid。&lt;/p&gt;

&lt;p&gt;jekyll是一个基于ruby开发的，专用于构建静态网站的程序。它能够将一些动态的组件：模板、liquid代码等构建成静态的页面集合，Github-Page全面引入jekyll作为其构建引擎，这也是学习jekyll的主要动力。同时，除了jekyll引擎本身，它还提供一整套功能，比如web server。我们用jekyll –server启动本地调试就是此项功能。读者可能已经发现，在启动server后，之前我们的项目目录下会多出一个_site目录。jekyll默认将转化的静态页面保存在_site目录下，并以某种方式组织。使用jekyll构建博客是十分适合的，因为其内建的对象就是专门为blog而生的，在后面的逐步介绍中读者会体会到这一点。但是需要强调的是，jekyll并不是博客软件，跟workpress之类的完全两码事，它仅仅是个一次性的模板解析引擎，它不能像动态服务端脚本那样处理请求。&lt;/p&gt;

&lt;p&gt;更多关于jekyll请看&lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/Liquid-Extensions&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll-3&quot;&gt;jekyll是如何工作的&lt;/h3&gt;

&lt;p&gt;在jekyll解析你的网站结构前，需要确保网站目录像下面那样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 20011-10-25-open-source-is-good.html
|   |-- 20011-04-26-hello-world.html
|-- _site
|-- index.html
|-- images
   |-- css
       |-- style.css
   |-- javascripts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;_config.yml：保存配置，该配置将影响jekyll构造网站的各种行为。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_includes：该目录下的文件可以用来作为公共的内容被其他文章引用，就跟C语言include头文件的机制完全一样，jekyll在解析时会对&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;file.ext&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;标记扩展成对应的在_includes文件夹中的文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_layouts：该目录下的文件作为主要的模板文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_posts：文章或网页应当放在这个目录中，但需要注意的是，文章的文件名必须是YYYY-MM-DD-title&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;_site：上面提到过，这是jekyll默认的转化结果存放的目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;images：这个目录没有强制的要求，主要目的是存放你的资源文件，图片、样式表、脚本等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-12&quot;&gt;一个例子&lt;/h3&gt;

&lt;p&gt;完成一个例子总是最快的入门方式。&lt;/p&gt;

&lt;p&gt;对于基于静态页面的网站，你显然不希望每篇文章都要写html、head等与文章本身无关的重复的东西，那么容易想到的是将这些东西作为模板提取出来，以便复用，_layouts文件夹中的文件可以作为这样的模板。现在我们在_layouts文件夹中创建一个模板文件，default.html：&lt;/p&gt;

&lt;p&gt;default.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   `{ { content }}`
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;default.html包含了每个html都需要的一些标记，以及一个个liquid标记。&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;是liquid中用来表示“内容”的标记，其中的对象在解析时会被替换成文件到页面中&lt;/p&gt;

&lt;p&gt;content：表示在这里的地方用子页面的内容替换。&lt;/p&gt;

&lt;p&gt;现在我们来实现一个主页，在根目录下，创建一个index.html&lt;/p&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
---
&amp;lt;h1&amp;gt;Hello jekyll&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the index page&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了普通的html标记外，开头这一段称为YAML格式，以一行“—”开头，一行“—”结尾，在虚线的中间以key-value的形式对一些全局变量进行赋值。&lt;/p&gt;

&lt;p&gt;layout变量表示该文章应当使用_layouts/default这个文件作为父模板，并将index.html中的内容替换父模板中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;标记。&lt;/p&gt;

&lt;p&gt;在根目录中启动jekyll –server，并访问http://localhost:4000/index.html，你将得到下面页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-05-img0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该页面的Html源码如下，可以看到，index.html中的内容替换了default.html中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello jekyll&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the index page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在请观察一下_site中的index.html，就是上面的Html代码！OK，现在你明白jekyll的工作方式了吧，它仅仅一次性的完成静态页面的转化，其余的事情全都交给普通的web server了！&lt;/p&gt;

&lt;p&gt;需要注意的是，如果你失败了，请确保你的文件都是UTF-8 without BOM的格式。&lt;/p&gt;

&lt;p&gt;在windows中，为了甄别UTF-8编码格式的文本文件，默认会在文件头插入两个字节的标识，被称为BOM。事实证明这是个“歪门邪道”，jekyll不识别这种特殊的标记，所以可以使用Notepad++或其他的工具将UTF-8编码文件开头的BOM去掉。&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;第一篇文章&lt;/h3&gt;

&lt;p&gt;现在我们来创建一篇博客文章，并在index.html页面添加文章的链接。&lt;/p&gt;

&lt;p&gt;在 _posts目录下创建2014-06-21-first-post.html&lt;/p&gt;

&lt;p&gt;2014-06-21-first-post.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
title: my first post
---
&amp;lt;h1&amp;gt;利用github-pages建立个人博客&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is my first post.Click the link below to go back to index:&amp;lt;/p&amp;gt;
&amp;lt;a href=&quot;/index.html&quot;&amp;gt;Go back&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改index.html&lt;/p&gt;

&lt;p&gt;index.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
---
&amp;lt;h1&amp;gt;Hello jekyll&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the index page&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;My post list:&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最终效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-05-img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个是略微复杂的例子，这里涉及到两个主要的对象&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;site：全局站点对象。比如site.posts返回当前站点所有在_post目录下的文章，上面的例子结合for循环来罗列所有的文章&lt;/li&gt;
  &lt;li&gt;page：文章对象。比如page.url将返回page对象的url，上面的例子用该对象和属性返回了文章的链接
另外要补充的是site.baseurl，该值就是我们在_config.yml中配置的baseurl啦！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些对象被称为“模板数据API”，更多API文档请参见&lt;a href=&quot;http://jekyllbootstrap.com/api/template-data-api.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;liquid&quot;&gt;liquid&lt;/h3&gt;

&lt;p&gt;liquid是jekyll底层用于解析的引擎，我们用到的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;亦或是&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;标记其实是靠liquid去解析的。本节将详细介绍liquid的使用。&lt;/p&gt;

&lt;p&gt;liquid包含两种标记，理解他们的机理是十分重要的：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;：输入标记，其中的内容将被文本输出
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;：操作标记，通常包含控制流代码
例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;     
       Sorry, you are too young
     
     
     
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另外liquid还包含一种叫filter的机制。这是种对输出标记的扩展，通过它可以对输出标记中的内容进行更细致的处理，例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;     Hello TOBI
     Hello tobi has 4 letters!
     Hello 2016 Aug
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;返回字符串大写的结果：TOBI
返回字符串的长度：4
将当前时间格式化输出
liquid内置了一些filter，并且该机制可以被扩展，jekyll便扩展了liquid的filter。&lt;/p&gt;

&lt;p&gt;更多关于liquid的使用方法，请参见&lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更多关于jekyll对liquid的扩展，请参见&lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;样式、分类、标签&lt;/h2&gt;

&lt;p&gt;在前一篇中我们实际使用jekyll做了一个略微“复杂”的模板。并用它生成了站点。但是这样的blog显然太粗糙了，别说不能吸引别人了，自己都看不下去啊。作为自己的“门户”，当然要把美化工作放在第一位啦。&lt;/p&gt;

&lt;p&gt;网站的美观十分重要，这当然要依靠CSS咯。因为完全基于静态页面，所以没有现成的动态模板可以使用，我们只能手写CSS了，这里不介绍CSS了，因为这是设计师的范畴了，屌丝程序员搞不来了。我的blog的样式是从网上找过来改的。&lt;/p&gt;

&lt;p&gt;从功能的角度blog除了文章以外，对文章的分类、标签、归档都是主流的功能。&lt;/p&gt;

&lt;p&gt;分类和标签功能是jekyll的yaml-format的内置功能，在每篇文章上方可以设置：这里需要注意的是如果多个分类或者tag的话，用逗号分隔，并且要紧跟一个空格。分类可以任意添加，Jekyll在解析网站的时候会统计所有的分类，并放到site.categories中；换句话说，不能脱离文章而设置分类。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: default
title: Title
description: 这里的description是自定义属性。
categories: [web-build]
tags: [github-page, jekyll, liquid]
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面是本站罗列分类的代码，供大家参考&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;categories-3&quot; class=&quot;left&quot;&amp;gt;
     &amp;lt;h3&amp;gt;Categories&amp;lt;/h3&amp;gt;
     &amp;lt;ul&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/web.html&quot;&amp;gt;web&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/other.html&quot;&amp;gt;other&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
         &amp;lt;li class=&quot;cat-item cat-item-6&quot;&amp;gt;
         	&amp;lt;a href=&quot;/categories/programming.html&quot;&amp;gt;programming&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
         
     &amp;lt;/ul&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意到分类的url链接，这里的categories目录以及其中的html不会自动生成，需要手动添加的，也就是说每增加一个分类，都需要在categories下添加一个该分类的html。当然你可以选择其他目录，甚至考虑其他解决方案，不过我还没想到更简单的方法。Tag的处理方式类似，这里就省略了。&lt;/p&gt;

&lt;p&gt;推荐大家下载jekyll原作者推荐的简单例子来学习：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$git clone https://github.com/plusjade/jekyll-bootstrap.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载的目录里面是一个完整的网站，可以使用我们本地的jekyll –server启动。另外，作者的网站：&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;http://jekyllbootstrap.com/
&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;代码高亮&lt;/h3&gt;

&lt;p&gt;参考&lt;a href=&quot;http://jekyllrb.com/docs/templates/&quot;&gt;Jekyll官网文档&lt;/a&gt;里&lt;em&gt;Code snippet highlighting&lt;/em&gt;一节。玩颜色魔法的大魔术师是&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;python-pygments&quot;&gt;安装Python Pygments&lt;/h3&gt;

&lt;p&gt;Ubtuntu下：sudo apt-get install python-pygments&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;设置代码高亮的样式&lt;/h3&gt;

&lt;p&gt;通过下面的命令可以查看当前支持的样式
	from pygments.styles import STYLE_MAP
	STYLE_MAP.keys()
输出：
    	[‘monokai’, ‘manni’, ‘rrt’, ‘perldoc’, ‘borland’, ‘colorful’, 		‘default’, ‘murphy’, ‘vs’, ‘trac’, ‘tango’, ‘fruity’, ‘autumn’, 	‘bw’, ‘emacs’, ‘vim’, ‘pastie’, ‘friendly’, ‘native’]&lt;/p&gt;

&lt;h3 id=&quot;css&quot;&gt;生成指定样式的css文件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pygmentize -S native -f html &amp;gt; pygments.css
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将生成的css文件拷贝到主题的css目录下，如：&lt;/p&gt;

   	 %github pages project folder%\assets\themes\twitter\css\

&lt;p&gt;引入default.html中引入css文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// default目录如
	%github pages project folder%\includes\themes\twitter\

// 引入如下代码
	&amp;lt;link href='/css/pygments.css' rel=&quot;stylesheet&quot; media=&quot;all&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在文章中高亮代码:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
       	 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
    	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-17&quot;&gt;给文章添加目录&lt;/h3&gt;

&lt;p&gt;如你所见，我的这个博客里，稍长点的文章，都会生成目录树（Table of Content），并且配合有Bootstrap的&lt;a href=&quot;http://www.zfanw.com/blog/twitter-bootstrap-affix-js.html&quot;&gt;affix&lt;/a&gt;、&lt;a href=&quot;http://www.zfanw.com/blog/bootstrap-scrollspy.html&quot;&gt;ScrollSpy&lt;/a&gt; 效果。同样地，在Jekyll构建的静态博客上，我一样想生成目录树。
Jekyll的Plugins页面中有提到一个插件 &lt;a href=&quot;https://github.com/dafi/jekyll-toc-generator&quot;&gt;jekyll-toc-generator&lt;/a&gt;，但其实没有必要使用插件，因为 Jekyll 的 Markdown 渲染器 &lt;a href=&quot;http://kramdown.gettalong.org/converter/html.html#toc&quot;&gt;kramdown&lt;/a&gt; 已经具备这个功能。我们只需要启用它即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;启用 kramdown&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;打开 _config.yml 文件，确保以下一行存在：
	markdown: kramdown&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;生成 TOC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接下来是在文章中标识 toc 的生成位置：
	* 目录
	{:toc}
	# 陈三
	## 陈三的博客&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;请注意，&lt;code class=&quot;highlighter-rouge&quot;&gt;* 目录&lt;/code&gt;这一行是必需的，它表示目录树列表，至于星号后面写什么请随意&lt;/li&gt;
  &lt;li&gt;如果要把某标题从目录树中排除，则在该标题的下一行写上 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:.no_toc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;目录深度可以通过 config.yml 文件中添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;toc_levels&lt;/code&gt; 选项来定制，默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;1..6&lt;/code&gt;，表示标题一至标题六全部渲染&lt;/li&gt;
  &lt;li&gt;默认生成的目录列表会添加 id 值 &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-toc&lt;/code&gt;，我们可以自定义 id 值，比如 {:toc #chen}，生成的目录列表添加的 id 将会是 chen。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-18&quot;&gt;评论功能&lt;/h3&gt;

&lt;p&gt;静态的网站不可能自己存放评论，于是只能考虑外挂评论了，查了一下比较靠谱和广泛的就是DISQUS了;
Disqus是一个社会化的评论解决方案，请允许我使用这个烂透了的词，调用它的接口非常简单，在自己的页面加载他的一段JS代码即可，如果别人注册了Disqus，那么就可以方便的留言，交流，一处登录，处处方便，而且Disqus也提供了一些spam等策略，不用自己操心了，并且可以和一些现有的博客系统很好的转换对接。越来越多的网站开始使用Disqus的服务了，这是一个非常不错的趋势，Jekyll配合&lt;a href=&quot;http://disqus.com&quot; title=&quot;Disqus&quot;&gt;Disqus&lt;/a&gt;实在是完美了。我别无所求了。&lt;/p&gt;

&lt;p&gt;点击&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-06-img0.png&quot; alt=&quot;&quot; /&gt;，在下面的页面中填写相关的信息，注意先在右侧注册登录信息，然后再在左侧增加一个站点：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-06-img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;填写完成后点击“Continue”，在接下来的页面中选择Universal Code，然后根据提示完成接下来的操作，后面的操作就十分简单了：主要就是把产生的脚本文件复制到你的站点页面中即可。&lt;/p&gt;

&lt;p&gt;DISQUS还有一个Dashboard，可以用来管理评论，这里就不再详述了。最后的效果就是本blog文章下方的评论咯，还是挺好看的，国内的还有个多说的评论引擎，支持国内的各大网站帐号。&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;站内搜索&lt;/h3&gt;

&lt;p&gt;blog当然不能缺少站内搜索功能。主流的站内搜索都是主流的搜索引擎提供的。作为一个google控，当然必须选择google啊。当然你必须拥有一个google帐号。&lt;/p&gt;

&lt;p&gt;google的站内搜索叫：custome search engine：&lt;a href=&quot;http://www.google.com/cse&quot;&gt;http://www.google.com/cse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;创建一个自定义搜索与添加评论类似只要三步：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;填写自定义搜索的名字、描述、语言、站点信息，这些信息中唯一需要注意的是站点信息，建议使用mydomain.com作为搜索范围，因为这样的话，会自动转化成&lt;em&gt;.mydomain.com/&lt;/em&gt;，能包含全站的内容&lt;/li&gt;
  &lt;li&gt;选择样式和尝试搜索。尝试搜索有时不能成功，但是不要紧&lt;/li&gt;
  &lt;li&gt;将生成脚本写到网页中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这时，可能搜索功能仍然无法使用，尤其是你的网站没有什么名气，也没有什么外链。因为google的爬虫不可能很快的抓到你的网站。但这里有个技巧可以让你的网站立刻被google收录（姑且不论排名），那就是google的Webmaster Tools工具，该工具是免费的，而且还集成了站点流量统计功能，十分强大。&lt;/p&gt;

&lt;p&gt;进入地址：&lt;a href=&quot;https://www.google.com/webmasters/tools/home&quot;&gt;https://www.google.com/webmasters/tools/home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/githubpages/build-github-blog-page-06-img5.png&quot; alt=&quot;&quot; /&gt;
它会要你认证你对网站的所有权，下载一个HTML文件，把它上传到你的网站上，
设置完成之后基本上立刻就生效了，无需等待一天。&lt;/p&gt;

&lt;p&gt;认证成功后，进入&lt;a href=&quot;http://www.xml-sitemaps.com/&quot;&gt;sitemaps网站&lt;/a&gt;,在下面填入你的网站后点击start，
&lt;img src=&quot;/images/images/githubpages/sitemap.jpg&quot; alt=&quot;&quot; /&gt;
接下来下载sitemap文件，把它上传到你的域名根目录，
打开Optimization-&amp;gt;Sitemaps，点击Add/TEST SITEMAP，输入指向你的站点的sitemap地址，本博客的sitemap是：&lt;a href=&quot;http://coolshell.info/sitemap.xml&quot;&gt;http://coolshell.info/sitemap.xml&lt;/a&gt;,过几分钟就看到下面的结果：
！&lt;a href=&quot;/images/images/githubpages/sitemap2.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;sitemap是网站所有链接的集合，最简单的sitemap可以是一个文本文件，其中只存放你网站的所有可用资源的链接，这有利于搜索引擎收录你的网站内容。复杂的sitemap还可以利用sitemap的专用格式来标注资源的形式，更多关于sitemap可以参考：http://www.sitemaps.org/
完成站点认证和sitemap测试后，我们回到自定义搜索的页面，进入到control panel-&amp;gt;Indexing，在其中使用sitemap来迫使google索引你的网站。这样，你的网站就算被google收录了。&lt;/p&gt;

&lt;p&gt;至于我们的站内搜索应该是可以用的了，试试本站点上方的搜索就知道啦～&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;站点统计&lt;/h3&gt;

&lt;p&gt;这里介绍的站点统计是google的analytics，analytics的使用十分简单，同样的原理，利用注入脚本来实现流量统计的外挂，统计功能十分强大，谁用谁知道。这里就不再唠叨了。。&lt;/p&gt;

&lt;h2 id=&quot;godaddy--dnspod&quot;&gt;GoDaddy &amp;amp; DNSPod&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://godaddy.com&quot; title=&quot;Godaddy&quot;&gt;GoDaddy&lt;/a&gt;是一家非常不错的域名注册商，良好的用户体验，飞快的生效速度，给力的优惠码，也支持支付宝，永远不用担心国内那些流氓厂商的流氓行为，注册了域名，就可以放心不会被别人抢走。在Godaddy注册域名是一件很简单的事情，按照提示走就完全没有问题，唯一需要动脑筋的可能是，你要想一个既有个人标识，又没有被别人注册的域名了。&lt;/p&gt;

&lt;p&gt;Godaddy一切都很完美，直到遇到了GFW，原因你肯定懂。前段时间推上风传Godaddy的DNS服务器被墙，导致域名不能解析，看起来好像自己的站被墙了一样，这个确实是个闹心的事情，还好国内有DNS服务的替代产品，而且做得还非常的不错，也是免费的，功能强大，速度快，不用担心被和谐，所以隆重推荐&lt;a href=&quot;http://dnspod.cn&quot; title=&quot;DNSPod&quot;&gt;DNSPod&lt;/a&gt;给大家，可以试用一下，把DNS服务迁移到DNSPod来，解决后顾之忧，配置比较简单，不懂的可以等我后面的博客啦，哈。&lt;/p&gt;

&lt;h2 id=&quot;github--jekyll&quot;&gt;GitHub &amp;amp; Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com&quot; title=&quot;Github:social coding&quot;&gt;GitHub&lt;/a&gt;是一个非常优秀的产品，爆发式的增长，各大优质开源软件的蜂涌而至，只能说明人们太需要他了。&lt;strong&gt;Social Coding&lt;/strong&gt;是他的Slogan，产品的设计确实解决了很多代码交流的难题，让世界更平，让交流更畅，关于Git的学习，大家可以移步这里&lt;a href=&quot;http://progit.org/book/zh/&quot; title=&quot;Pro Git&quot;&gt;Pro Git中文版&lt;/a&gt;，这也是一个本身就在Github维护的一个项目，高质量的翻译了Git入门书，讲解详细，是学习Git的好资料。&lt;/p&gt;

&lt;p&gt;GitHub是一个伟大的产品，&lt;a href=&quot;http://pages.github.com&quot; title=&quot;GitHub Pages&quot;&gt;GitHub Pages&lt;/a&gt;是他伟大的一部分，GitHub Pages基于&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;博客引擎，当我深入的研究了他之后，我深深的想给Jekyll的作者一个拥抱，列举一下Jekyll的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以单独放在自己的服务器上，他也是GitHub Pages的基础，质量可靠&lt;/li&gt;
  &lt;li&gt;将博客最重要的功能抽取出来，去除了&lt;a href=&quot;http://wordpress.org&quot; title=&quot;WordPress&quot;&gt;WordPress&lt;/a&gt;的复杂、烦躁的东西，一切都是清晰可控的&lt;/li&gt;
  &lt;li&gt;可以方便的使用&lt;a href=&quot;http://markdown.tw/&quot; title=&quot;Markdown语法&quot;&gt;Markdown&lt;/a&gt;等其他标记语言&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;清晰、简洁的文件组织，完美的永久链接方案，既漂亮、又可定制&lt;/li&gt;
&lt;li&gt;博客静态化，速度快&lt;/li&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;是完美的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;写到这里，基本的点已经介绍完毕，现在介绍下怎么获取别人的博客模板来建立自己的博客。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取并修改别人的博客&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll官方建立了一个&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/sites&quot;&gt;页面&lt;/a&gt;，里面有许多的模板可供参考。接下来我们就要奉行“拿来主义”了，将别人的模板为我们所用。&lt;/p&gt;

&lt;p&gt;我自己用了Yukang’s Page&amp;lt;/a&amp;gt;，他采用了一个叫做&lt;a href=&quot;http://themes.jekyllbootstrap.com/preview/twitter/&quot;&gt;twitter&lt;/a&gt;的Jekyll Bootstrap的模板。下面假设你已经安装了git，我们把他人的网站代码clone下来，为了举例方便，还是选取了Yukang’s Page：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/chenyukang/chenyukang.github.com.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后删去别人的.git文件夹：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf .git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着，我们参考&lt;a href=&quot;http://jekyllrb.com/docs/structure/&quot;&gt;jekyll的文件目录&lt;/a&gt;，可以把他人的博客删去，并且做一些小的调整。接下来，我们把改头换面的博客上传到自己的GitHub帐号中去。一般情况下，假设你的帐号名是USERNAME，你需要建一个名为USERNAME.github.io的帐号，分支为master。这样，在你将本地的网站push上去之后，不到10分钟，访问USERNAME.github.io，就可以看到你新鲜出炉的网站了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add -A
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/USERNAME/USERNAME.github.io.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Git博大精深，我还没有熟练掌握。具体的命令可以参考下面一些参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;入门：&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot;&gt;git - 简易指南&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进阶：&lt;a href=&quot;http://think-like-a-git.net/epic.html&quot;&gt;Think Like (a) Git&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;参考图解：&lt;a href=&quot;http://marklodato.github.io/visual-git-guide/index-en.html&quot;&gt;A Visual Git Reference&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你想要在push之前就在本地预览一下网站，可以使用
&lt;code&gt;jekyll serve --watch&lt;/code&gt;
命令。默认设置下，可以在浏览器中访问localhost:4000预览。详细情况请&lt;a href=&quot;http://jekyllrb.com/docs/usage/&quot;&gt;点击这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;那么，我们如何撰写新的博客呢？下面，我们隆重推出Markdown。&lt;/p&gt;

&lt;h2 id=&quot;markdown&quot;&gt;Markdown语法&lt;/h2&gt;

&lt;p&gt;根据&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/Markdown&quot;&gt;维基百科上的介绍&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）和亚伦·斯沃茨（Aaron Swartz）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想到&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8&quot;&gt;Aaron Swartz&lt;/a&gt;已经故去，不禁一阵伤感。&lt;/p&gt;

&lt;p&gt;Markdown的介绍有许多，个人推荐：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;入门：&lt;a href=&quot;http://jianshu.io/p/q81RER&quot;&gt;献给写作者的 Markdown 新手指南&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;另一份入门文档：&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进阶：&lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;Markdown 语法说明 (简体中文版) &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kramdown使用心得：&lt;a href=&quot;http://mindspill.net/computing/web-development-notes/kramdown-notes/&quot;&gt;Kramdown notes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;备注：如何在Markdown中写注释呢？&lt;a href=&quot;https://twitter.com/denialduan/status/180532937358454784&quot;&gt;这里&lt;/a&gt;提供了最原始的一种解决方法：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;看来在Markdown文件里写注释的唯一方法就是用&amp;lt;!– –&amp;gt;了，好吧。&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>当我们打开网页时发生了什么</title>
   <link href="http://http://blog.kedyy.com/web/2014/10/11/how-http-works.html"/>
   <updated>2014-10-11T00:00:00+00:00</updated>
   <id>/web/2014/10/11/how-http-works</id>
   <content type="html">&lt;p&gt;简单地来说，当我们在浏览器上输入URL的敲下回车的时候。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;浏览器需要查找域名[domain]的IP，从不同的缓存直至DNS服 务器。&lt;/li&gt;
  &lt;li&gt;浏览器会给web服务器发送一个HTTP请求&lt;/li&gt;
  &lt;li&gt;服务器“处理”请求&lt;/li&gt;
  &lt;li&gt;服务器发回一个HTTP响应&lt;/li&gt;
  &lt;li&gt;浏览器渲染HTML到页面。
 比如我们从&lt;a href=&quot;http://www.joes-hardware.com:80/power-tools.html&quot;&gt;http://www.joes-hardware.com:80/power-tools.html&lt;/a&gt;获取资源的时候，整个过程如下图所示：
 &lt;img src=&quot;/images/images/http/1.jpeg&quot; alt=&quot;&quot; /&gt;
开始时我们输入的是URI(统一资源标识符,Uniform Resource Identifier)，我们用的比较多的是URI的一个子集叫统一资源定位符(URL,Uniform Resource Locator)。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;url&quot;&gt;URL组成&lt;/h2&gt;
&lt;p&gt;网址算是URL的一个俗称，让我们来看看一个URL的组成，以HTTP版IOT中的URL为例。
大多数URL都建立在这个通用格式&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;path&amp;gt;;&amp;lt;params&amp;gt;?&amp;lt;query&amp;gt;#&amp;lt;frgs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;各个部分的介绍如下表：
&lt;img src=&quot;/images/images/http/0.jpeg&quot; alt=&quot;&quot; /&gt;
以一个实际例子来说：
当我们在浏览器中输入&lt;a href=&quot;http://b.phodal.com/athome/1&quot;&gt;http://b.phodal.com/athome/1&lt;/a&gt;按下回车&lt;/p&gt;

&lt;p&gt;开始之前，我们需要标出URL的80端口以及json文件的全称，那么上面的网址就会变成&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.phodal.com:80/athome/1.json&quot;&gt;http://b.phodal.com:80/athome/1.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;那么对于这个URL的就有下面几部分组成&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;http:&lt;/strong&gt;// http说的是这个URL用的是HTTP协议，至于//是一个分隔符，用法和C语言中的;一样。这样的协议还可以是coap,https,ftp等等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;b&lt;/strong&gt; 是子域名，一个域名在允许的情况下可以有不限数量的子域名。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;phodal.com&lt;/strong&gt; 代表了一个URL是phodal.com下面的域名&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;80&lt;/strong&gt; 80是指80端口，http默认的都是80，对于一个不是80端
 口的URL应该是这样的http://iot-coap.phodal.com:8896/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;athome&lt;/strong&gt; 指的是虚拟目录部分，或者文件路径&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1.json&lt;/strong&gt;看上去就是一个文件名，然而也代表着这是一个资源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对就一个稍微复杂点的例子就是
&lt;a href=&quot;http://designiot.phodal.com/#%E4%BD%A0%E6%89%80%E6%B2%A1%E6%9C%89%E6%B7%B1%E5%85%A5%E7%9A%84http&quot;&gt;http://designiot.phodal.com/#你所没有深入的http&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里的#后面是片段部分（frag），如果你打开这个URL就会发现会直接跳转到相应的片段，对就于下面这样的一个例子来说&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.phodal.com/search;sales=false/?q=iot&amp;amp;type=blog&quot;&gt;http://www.phodal.com/search;sales=false/?q=iot&amp;amp;type=blog&lt;/a&gt;
&lt;strong&gt;;&lt;/strong&gt;后面是&lt;strong&gt;参数部分&lt;/strong&gt;，以便正确的与服务器进行交互
&lt;strong&gt;?&lt;/strong&gt;后面的q=iot&amp;amp;type=blog的部分是&lt;strong&gt;查询字符串&lt;/strong&gt;，通常用于查询或者、搜索。&lt;/p&gt;

&lt;h2 id=&quot;http&quot;&gt;HTTP报文&lt;/h2&gt;

&lt;p&gt;http客户端向http服务器发送请求报文，请求报文格式如下：
请求行
首部
空行
主体部分&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;method&amp;gt;&amp;lt;request-URL&amp;gt;&amp;lt;version&amp;gt;
&amp;lt;headers&amp;gt;

&amp;lt;entity-body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;响应报文的格式如下：
响应行
首部
空行
主体&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;version&amp;gt;&amp;lt;status&amp;gt;&amp;lt;reason-phase&amp;gt;
&amp;lt;headers&amp;gt;

&amp;lt;entity-body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;方法method，常见的有get和post，是客户端希望服务器对资源执行的动作&lt;/li&gt;
  &lt;li&gt;请求URL。所请求资源的完整URL或者相对路径&lt;/li&gt;
  &lt;li&gt;版本version，报文使用的http版本，比如HTTP1.1&lt;/li&gt;
  &lt;li&gt;首部header，向请求报文和响应报文添加了一些信息，本质上都是一些名/值对的列表。&lt;/li&gt;
  &lt;li&gt;状态码（status）描述请求过程发生的情况，比如200，表示OK&lt;/li&gt;
  &lt;li&gt;原因短语(reason-phase),数字状态码的可读版本&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实体的主体部分(entity-body)
 一个可能的请求报文图下：&lt;/p&gt;

    &lt;p&gt;GET /java/2014/08/02/java-multithread.html HTTP1.1
  Accept:text/html
  Host: www.lippiouyangonline.info&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可能的响应报文如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; HTTP/1.1 200 OK
 content-type: text/plain
 content-length: 19
 
 Hi,I'm a message! 下面是一个POST方法示例：    ![](/images/images/http/2.jpeg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;连接管理&lt;/h2&gt;
&lt;p&gt;几乎所有的HTTP通信都是由TCP/IP承载的，HTTP要传送一个报文，会以流的形式将报文数据内容通过一条打开的TCP连接按序传输。TCP收到数据流后会将数据流切成小段的数据块，并将段封装在IP分组中，通道因特网进行传输，每个IP分组包括：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1. 一个IP分组首部(通常为20字节)
 2. 一个TCP段首部(通常为20字节)
 3. 一个TCP数据块(0个或者多个字节)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;IP首部包括源和目的的的IP地址，长度和其他一些标记，TCP首部包括TCP端口号和控制标记。 端口号和电话分机很类似，就像公司的总机号码能将你接到前台，分机号码帮你找到正确的联系人。IP地址可能将你链接的正确的计算机，端口号将你连接到正确的应用程序上去，端口号就是一个数字，HTTP的默认端口号为80。
TCP连接是通过4个值来识别的：
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;源IP地址、源端口号、目地IP地址、目地端口号&amp;gt;&lt;/code&gt;这4个值唯一定义了一条TCP连接。
 一个TCP分组如下：
  &lt;img src=&quot;/images/images/http/3.jpeg&quot; alt=&quot;&quot; /&gt;
一个典型的TCP客户端和服务器的通信过程如下：
 &lt;img src=&quot;/images/images/http/4.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;待续…
参考书目：HTTP权威指南&lt;/p&gt;
</content>
 </entry>
 
 
</feed>